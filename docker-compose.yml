networks:
    internal:
        external: false

services:
    broker:
        container_name: paperless-redis
        image: redis:${DOCKER_REDIS_VERSION}
        networks:
            - internal
        volumes:
            # Change to your correct path(s)
            - ${PAPERLESS_ROOT_DIR}/redis:/data
        restart: unless-stopped
        user: "${USERMAP_UID}:${USERMAP_GID}" # Your Paperless user/group IDs
        sysctls:
            - net.core.somaxconn=511
        cap_add:
            - SYS_RESOURCE
        deploy:
            resources:
                limits:
                    memory: 256M
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3

    webserver:
        container_name: paperless
        image: ghcr.io/paperless-ngx/paperless-ngx:${DOCKER_PAPERLESS_VERSION}
        networks:
            # If the Proxy Manager is on the Synology, then the network from it should also be entered here, instead of opening a port.
            - internal
        restart: unless-stopped
        depends_on:
            - db
            - broker
        ports:
            # Delete this part if the Proxy Manager is on the Synology.
            # Otherwise, select a port here that is free.
            - 8000:8000
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000"]
            interval: 30s
            timeout: 10s
            retries: 5
        volumes:
            # Enter the correct paths here
            - ${PAPERLESS_ROOT_DIR}/data:/usr/src/paperless/data
            - ${PAPERLESS_ROOT_DIR}/media:/usr/src/paperless/media
            - ${PAPERLESS_ROOT_DIR}/export:/usr/src/paperless/export
            - ${PAPERLESS_CONSUME_DIR}:/usr/src/paperless/consume
        env_file: docker-compose.env
        environment:
            PAPERLESS_REDIS: redis://broker:6379
            PAPERLESS_DBHOST: db
            PAPERLESS_DBUSER: ${PAPERLESS_DBUSER}
            PAPERLESS_DBPASS: ${PAPERLESS_DBPASS}
            PAPERLESS_TIKA_ENABLED: 1
            PAPERLESS_TIKA_ENDPOINT: http://tika:9998
            PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000/ #or http://gotenberg:3000/forms/libreoffice/convert#
            USERMAP_UID: ${USERMAP_UID}
            USERMAP_GID: ${USERMAP_GID}
        deploy:
            resources:
                limits:
                    memory: 2048M
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "5"

    db:
        container_name: paperless-db
        image: postgres:${DOCKER_POSTGRES_VERSION}
        # Do not simply upgrade or downgrade, as the database will not load anymore.
        networks:
            - internal
        restart: unless-stopped
        volumes:
            # Enter the correct path here
            - ${PAPERLESS_ROOT_DIR}/db:/var/lib/postgresql/data
        environment:
            POSTGRES_DBHOST: db
            POSTGRES_DBNAME: ${PAPERLESS_DBNAME}
            POSTGRES_USER: ${PAPERLESS_DBUSER}
            POSTGRES_PASSWORD: ${PAPERLESS_DBPASS}
        deploy:
            resources:
                limits:
                    memory: 512M
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "paperless"]
            interval: 30s
            timeout: 5s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "5"

    db-backup:
        container_name: paperless-db-backup
        # Possibly adjust the image to match the one above
        image: postgres:${DOCKER_POSTGRES_VERSION}
        volumes:
            # Enter the correct path here
            - ${PAPERLESS_ROOT_DIR}/db-backup:/dump
            - /etc/localtime:/etc/localtime:ro
        environment:
            PGHOST: db
            PGDATABASE: ${PAPERLESS_DBNAME}
            PGUSER: ${PAPERLESS_DBUSER}
            PGPASSWORD: ${PAPERLESS_DBPASS} # This is the password from above
            BACKUP_NUM_KEEP: 10
            BACKUP_FREQUENCY: 7d # Every 7 days, can be adjusted
        entrypoint: |
            bash -c 'bash -s <<EOF
            trap "break;exit" SIGHUP SIGINT SIGTERM
            sleep 2m
            while /bin/true; do
              pg_dump -Fc > /dump/dump_\`date +%d-%m-%Y"_"%H_%M_%S\`.psql
              (ls -t /dump/dump*.psql|head -n $$BACKUP_NUM_KEEP;ls /dump/dump*.psql)|sort|uniq -u|xargs rm -- {}
              sleep $$BACKUP_FREQUENCY
            done
            EOF'
        networks:
            - internal
        deploy:
            resources:
                limits:
                    memory: 256M

    # Omit this part if you do not want conversion of Office documents, emails.
    gotenberg:
        container_name: paperless-gotenberg
        image: gotenberg/gotenberg:${DOCKER_GOTENBERG_VERSION}
        restart: unless-stopped
        environment:
            CHROMIUM_DISABLE_ROUTES: 1
        command:
            - "gotenberg"
            - "--chromium-disable-javascript=true"
            - "--chromium-allow-list=file:///tmp/.*"
        networks:
            - internal
        deploy:
            resources:
                limits:
                    memory: 512M
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
            interval: 30s
            timeout: 5s
            retries: 3

    tika:
        container_name: paperless-tika
        image: apache/tika:${DOCKER_TIKA_VERSION}
        restart: unless-stopped
        networks:
            - internal
        deploy:
            resources:
                limits:
                    memory: 512M
